[{"content":"🍃 Selbstlern-Notizen Heute war wieder ein produktiver Tag! Ich habe endlich verstanden, wie man mit einem Hugo-Theme erfolgreich einen Blog auf GitHub Pages deployt. Hier sind meine Notizen, um anderen in ähnlichen Situationen zu helfen.\n🎯 Vorbereitung Um loszulegen, benötigst du folgende Tools:\nHugo: Ein statischer Website-Generator, um deinen Blog zu erstellen. Hugo-Theme: Ein hübsches Theme, das deinem Blog den letzten Schliff verleiht. GitHub: Zur Verwaltung deines Codes und Blog-Inhalts. GitHub Desktop: Ein benutzerfreundlicher Git-Client, der die Synchronisation erleichtert. 💡 Tipp: Die Installation dieser Tools ist ganz einfach. Die offiziellen Websites bieten ausführliche Anleitungen.\n🛠️ Der Konfigurationsprozess\nDie Konfiguration kann anfangs etwas kompliziert sein. Aber keine Sorge, hier gibt es ein großartiges Tutorial, das jeden Schritt erklärt: 👉 Verwendung von Hugo zur Erstellung statischer Seiten und kostenloses Hosting auf GitHub Pages(https://letere-gzj.github.io/hugo-stack/p/hugo/custom-blog/)\nDieses Tutorial deckt den gesamten Prozess ab – vom Start bis zur erfolgreichen Veröffentlichung deines Blogs.\n💡 Nützlicher Zusatz Nachdem du alle Schritte abgeschlossen hast, kannst du dein lokales Repository in GitHub Desktop hinzufügen. Das Programm erkennt automatisch den Namen deines Repositories, und du kannst Änderungen ganz bequem synchronisieren. Kein manuelles Hochladen mehr – einfach und effizient!\n✨ Fazit Mit Hugo und GitHub Pages einen Blog zu erstellen, ist nicht nur kostengünstig, sondern auch eine tolle Möglichkeit, deinen Lernprozess und deine Projekte zu präsentieren. Programmieren zu lernen macht unglaublich Spaß – jedes abgeschlossene Projekt ist ein kleiner Erfolg! Wenn du dich für solche Inhalte interessierst, schau doch regelmäßig auf meinem Blog vorbei. Ich werde mehr über meine Lern- und Wachstumserfahrungen teilen! 💻🌟\n","date":"2024-11-15T00:00:00Z","permalink":"https://lumimimi.github.io/lumiblog/de/p/blog/","title":"GitHub Pages + Hugo"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;?php // Die Abfrage ausführen und das Ergebnisset abrufen $sql = \u0026#34;SELECT DATE1 FROM Table1\u0026#34;; $stmt = $conn-\u0026gt;query($sql); // Eine Zeile Daten abrufen $row = $stmt-\u0026gt;fetch(PDO::FETCH_ASSOC); // Methode 1: Verwenden von echo zur Ausgabe des Werts echo $row[\u0026#39;DATE1\u0026#39;]; // Methode 2: Verwenden von var_dump zur Anzeige von Typ und Wert // var_dump zeigt sowohl den Typ als auch den Wert der Variablen an, was beim Debuggen hilfreich ist var_dump($row[\u0026#39;DATE1\u0026#39;]); ?\u0026gt; Abfrage ausführen:\nVerwenden Sie $conn-\u0026gt;query($sql), um die Abfrage auszuführen und das Ergebnisset zu erhalten. Dann wird $stmt-\u0026gt;fetch(PDO::FETCH_ASSOC) verwendet, um eine Zeile der Daten abzurufen und in der Variablen $row zu speichern.\nDaten ausgeben:\necho wird verwendet, um den Wert des Feldes DATE1 auszugeben. var_dump zeigt sowohl den Typ als auch den Wert von DATE1 an, was beim Debuggen nützlich ist. ","date":"2024-11-15T00:00:00Z","permalink":"https://lumimimi.github.io/lumiblog/de/p/if-conditional/","title":"if conditional"}]